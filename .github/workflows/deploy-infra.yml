name: Deploy CloudFormation Stack - Infrastructure

on:
  push:
    branches:
      - main


env:
  AWS_REGION: us-east-1
  #STACK_NAME: infrastructure-stack
  ENV_NAME: dev
  PARAMS_FILE: aws-cloudformation/parameters/dev.json
  VPC_TEMPLATE: aws-cloudformation/templates/aws-networking.yaml
  IGW_TEMPLATE: aws-cloudformation/templates/aws-internet-gateway.yaml
  NAT_TEMPLATE: aws-cloudformation/templates/aws-nat-gateway.yaml
  SG_TEMPLATE: aws-cloudformation/templates/aws-sg.yaml
  ALB_TEMPLATE: aws-cloudformation/templates/aws-ecs-loadbalancer.yaml
  APIG_TEMPLATE: aws-cloudformation/templates/aws-apigateway.yaml
  S3_TEMPLATE: aws-cloudformation/templates/aws-s3-cf.yaml
  CF_TEMPLATE: aws-cloudformation/templates/aws-cloudfront.yaml
  S3_POLICY_TEMPLATE: aws-cloudformation/templates/aws-s3-policy.yaml
  ECR_TEMPLATE: aws-cloudformation/templates/aws-ecr.yaml
  LOG_GROUP_TEMPLATE: aws-cloudformation/templates/aws-ecs-loggroup.yaml
  ECS_ROLE_TEMPLATE: aws-cloudformation/templates/aws-ecs-role.yaml
  ECS_CLUSTER_TEMPLATE: aws-cloudformation/templates/aws-ecs-cluster.yaml
  ECS_SERVICE_TEMPLATE: aws-cloudformation/templates/aws-ecs-service.yaml
  ECS_TD_TEMPLATE: aws-cloudformation/templates/aws-ecs-taskdefinition.yaml
  

jobs:
  validate_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install cfn-lint dependencies
        run: |
          # Install cfn-lint
          python3 -m pip install --upgrade pip
          pip3 install cfn-lint
          cfn-lint --version

      - name: Lint CloudFormation templates
        run: |
          for template in aws-cloudformation/templates/*.yaml; do
            echo "Linting $template"
            cfn-lint -t "$template" 
          done
          


  deploy_network:
    runs-on: ubuntu-latest
    needs: validate_files

    outputs:
      VPCId: ${{ steps.network.outputs.VPCId }}
      PublicSubnetId1: ${{ steps.network.outputs.PublicSubnetId1 }}
      PublicSubnetId2: ${{ steps.network.outputs.PublicSubnetId2 }}
      PrivateSubnetId1: ${{ steps.network.outputs.PrivateSubnetId1 }}
      PrivateSubnetId2: ${{ steps.network.outputs.PrivateSubnetId2 }}
      PrivateSubnetId3: ${{ steps.network.outputs.PrivateSubnetId3 }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - Networking
        id: network
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-network
          template-file: ${{ env.VPC_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          output-keys: VPCId,PublicSubnetId1,PublicSubnetId2,PrivateSubnetId1,PrivateSubnetId2,PrivateSubnetId3


  deploy_igw:
    runs-on: ubuntu-latest
    needs: deploy_network
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - Networking IGW
        id: network
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-igw
          template-file: ${{ env.IGW_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            VPCId=${{ needs.deploy_network.outputs.VPCId }}
            PublicSubnetId1=${{ needs.deploy_network.outputs.PublicSubnetId1 }}
            PublicSubnetId2=${{ needs.deploy_network.outputs.PublicSubnetId2 }}


  deploy_nat:
    runs-on: ubuntu-latest
    needs: deploy_network
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - Networking NAT
        id: network
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-nat
          template-file: ${{ env.NAT_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            VPCId=${{ needs.deploy_network.outputs.VPCId }}
            PublicSubnetId1=${{ needs.deploy_network.outputs.PublicSubnetId1 }}
            PrivateSubnetId1=${{ needs.deploy_network.outputs.PrivateSubnetId1 }}
            PrivateSubnetId2=${{ needs.deploy_network.outputs.PrivateSubnetId2 }}
            PrivateSubnetId3=${{ needs.deploy_network.outputs.PrivateSubnetId3 }}


  deploy_sg:
    runs-on: ubuntu-latest
    needs: deploy_network
    outputs:
      SecurityGroupEcsId: ${{ steps.security_group.outputs.SecurityGroupEcsId }}
      SecurityGroupAlbId: ${{ steps.security_group.outputs.SecurityGroupAlbId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}     

      - name: Deploy CloudFormation Stack - Security Group
        id: security_group
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-security-group
          template-file: ${{ env.SG_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            VPCId=${{ needs.deploy_network.outputs.VPCId }}
          output-keys: SecurityGroupEcsId,SecurityGroupAlbId
        #  run: |
        #    cf_out="{{ steps.security_group.outputs.outputs-json}}"
        #    echo "VPCId: $(jq -r '.VPCId' <<< "$cf")"

        #  parameters: >-
        #    VPCId=$(echo '${{ needs.deploy_network.outputs.network_outputs }}' | jq -r '.[]|select(.OutputKey=="VPCId").OutputValue')
      
      
  deploy_alb:
    runs-on: ubuntu-latest
    needs: [deploy_network, deploy_sg]
    outputs:
      AppLoadBalancerDnsName: ${{ steps.alb.outputs.AppLoadBalancerDnsName }}
      AppLoadBalancerTargetGroupId: ${{ steps.alb.outputs.AppLoadBalancerTargetGroupId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - Application Load Balancer
        id: alb
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-alb
          template-file: ${{ env.ALB_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            VPCId=${{ needs.deploy_network.outputs.VPCId }}
            PublicSubnetId1=${{ needs.deploy_network.outputs.PublicSubnetId1 }}
            PublicSubnetId2=${{ needs.deploy_network.outputs.PublicSubnetId2 }}
            SecurityGroupAlbId=${{ needs.deploy_sg.outputs.SecurityGroupAlbId }}
          output-keys: AppLoadBalancerDnsName,AppLoadBalancerTargetGroupId


  deploy_api-gateway:
    runs-on: ubuntu-latest
    needs: deploy_alb
    outputs:
      ApiGatewayId: ${{ steps.api_gateway.outputs.ApiGatewayId }}
      ApiGatewayDomainName: ${{ steps.api_gateway.outputs.ApiGatewayDomainName }}


    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - API Gateway
        id: api_gateway
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-api-gateway
          template-file: ${{ env.APIG_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            AppLoadBalancerDnsName=${{ needs.deploy_alb.outputs.AppLoadBalancerDnsName }}
          output-keys: ApiGatewayId,ApiGatewayDomainName



  deploy_s3:
    runs-on: ubuntu-latest
    needs: validate_files
    #env:
    #  PARAMS_FILE: aws-cloudformation/parameters/dev.json
    outputs:
      S3RegionalDomainName: ${{ steps.storage.outputs.S3RegionalDomainName }}
      S3Arn: ${{ steps.storage.outputs.S3Arn }}
      S3BucketId: ${{ steps.storage.outputs.S3BucketId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        #uses: aws-actions/configure-aws-credentials@v2
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - S3 Bucket
        id: storage
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-storage
          template-file: ${{ env.S3_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          output-keys: S3RegionalDomainName,S3Arn,S3BucketId


  deploy_cloudfront:
    runs-on: ubuntu-latest
    needs: [deploy_api-gateway, deploy_s3]
    outputs:
      CloudFrontURL: ${{ steps.cloudfront.outputs.CloudFrontURL }}
      CloudFrontId: ${{ steps.cloudfront.outputs.CloudFrontId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - Cloudfront
        id: cloudfront
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-cloudfront
          template-file: ${{ env.CF_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            S3RegionalDomainName=${{ needs.deploy_s3.outputs.S3RegionalDomainName }}
            ApiGatewayDomainName=${{ needs.deploy_api-gateway.outputs.ApiGatewayDomainName }}
          output-keys: CloudFrontURL,CloudFrontId
    


  deploy_s3-policy:
    runs-on: ubuntu-latest
    needs: [deploy_s3, deploy_cloudfront]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - S3 Bucket Policy
        id: s3-policy
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-s3-policy
          template-file: ${{ env.S3_POLICY_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            S3BucketId=${{ needs.deploy_s3.outputs.S3BucketId }}
            S3Arn=${{ needs.deploy_s3.outputs.S3Arn }}
            CloudFrontId=${{ needs.deploy_cloudfront.outputs.CloudFrontId }}



  deploy_ecr:
    runs-on: ubuntu-latest
    needs: validate_files
    outputs:
      EcrRepositoryName: ${{ steps.ecr.outputs.EcrRepositoryName }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation Stack - ECR
        id: ecr
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-ecs-ecr
          template-file: ${{ env.ECR_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            ENV_NAME=${{ env.ENV_NAME }}
          output-keys: EcrRepositoryName

  
  deploy_ecr_docker_image:
    runs-on: ubuntu-latest
    needs: deploy_ecr
    outputs:
      image_uri: ${{ steps.docker_image_build_output.outputs.image_uri }}
    #  task_definition_id: ${{ steps.ecs_taskdefinition_output.outputs.task_definition_id }}
    #env:
    #  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    #  IMAGE_TAG: ${{ github.ref_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        id: docker_image_build_output
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          ECR_REPO_NAME: ${{ needs.deploy_ecr.outputs.EcrRepositoryName }}
        run: |
          IMAGE_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          echo "IMAGE_URI=$IMAGE_URI" >> "$GITHUB_ENV"
          echo "Building image: $IMAGE_URI"
          docker build -t $IMAGE_URI:latest microservice/app

        #  REPO_NAME=${{ needs.deploy_ecs-req.outputs.ecr_repository_name }}
        #  REGION=${{ env.AWS_REGION }}
        #  ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        #  IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${REPO_NAME}:latest

      - name: Push Docker image to ECR
        run: |
          docker push $IMAGE_URI:latest
        # echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

        #  REPO_NAME=my-ecr-repo
        #  REGION=${{ env.AWS_REGION }}
        #  ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        #  IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${REPO_NAME}:latest


  deploy_ecs-req:
    runs-on: ubuntu-latest
    needs: [deploy_api-gateway]
    outputs:
      LogGroupId: ${{ steps.ecs-loggroup.outputs.LogGroupId }}
      EcsRoleArn: ${{ steps.ecs-role.outputs.EcsRoleArn }}
      ECSClusterId: ${{ steps.ecs.outputs.ECSClusterId }}
      #ecr_repository_name: ${{ steps.ecr_output.outputs.ecr_repository_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Deploy CloudFormation Stack - ECS Log Group
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
        id: ecs-loggroup
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-ecs-loggroup
          template-file: ${{ env.LOG_GROUP_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            EnvName=$ENV_NAME
        #    ServiceName=${{ needs.deploy_api-gateway.outputs.api_gateway_domain_name }}
          output-keys: LogGroupId


      - name: Deploy CloudFormation Stack - ECS Role
        id: ecs-role
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-ecs-role
          template-file: ${{ env.ECS_ROLE_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          output-keys: EcsRoleArn


      - name: Deploy CloudFormation Stack - ECS Cluster
        env:
          ENV_NAME: ${{ env.ENV_NAME }}
        id: ecs
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-ecs-cluster
          template-file: ${{ env.ECS_CLUSTER_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            EnvName=$ENV_NAME
          output-keys: ECSClusterId


          
  deploy_ecs_td:
    runs-on: ubuntu-latest
    needs: [deploy_ecr, deploy_ecr_docker_image, deploy_ecs-req, deploy_alb, deploy_network, deploy_sg]
    outputs:
      ECSTaskDefinitionId: ${{ steps.ecs_taskdefinition.outputs.ECSTaskDefinitionId }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}            
      - name: Deploy CloudFormation Stack - ECS Task Definition
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ env.AWS_REGION }}
          EcrRepositoryName: ${{ needs.deploy_ecr.outputs.EcrRepositoryName }}
        run: |
          PARAMS=$(jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' ${{ env.PARAMS_FILE }})
          aws cloudformation deploy \
            --template-file ${{ env.ECS_TD_TEMPLATE }} \
            --stack-name ${{ env.ENV_NAME }}-ecs-taskdefinition \
            --parameter-overrides \
              LogGroupId=${{ needs.deploy_ecs-req.outputs.LogGroupId }} \
              EcsRoleArn=${{ needs.deploy_ecs-req.outputs.EcsRoleArn }} \
              ContainerImage=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${EcrRepositoryName}:latest \
              $PARAMS
    #    id: ecs-td
    #    env:
    #      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    #      AWS_REGION: ${{ env.AWS_REGION }}
    #      EcrRepositoryName: ${{ needs.deploy_ecr.outputs.EcrRepositoryName }}
    #    uses: ./.github/actions/deploy-cf-stack
    #    with:
    #      stack-name: ${{ env.ENV_NAME }}-ecs-taskdefinition
    #      template-file: ${{ env.ECS_TD_TEMPLATE }}
    #      params-file: ${{ env.PARAMS_FILE }}
    #      extra-params: |
    #        LogGroupId=${{ needs.deploy_ecs-req.outputs.LogGroupId }}
    #        EcsRoleArn=${{ needs.deploy_ecs-req.outputs.EcsRoleArn }}
    #        ContainerImage=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${EcrRepositoryName}:latest
    #      output-keys: ECSTaskDefinitionId

      - name: Get ECS Task Definition Outputs
        id: ecs_taskdefinition
        run: |
          ECSTaskDefinitionId=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.ENV_NAME }}-ecs-taskdefinition \
            --query "Stacks[0].Outputs[?OutputKey=='ECSTaskDefinitionId'].OutputValue" \
            --output text)
      
 
            echo "ECSTaskDefinitionId=$ECSTaskDefinitionId" >> $GITHUB_OUTPUT 
            echo $ECSTaskDefinitionId


  deploy_ecs-service:
    runs-on: ubuntu-latest
    needs: [deploy_ecr, deploy_ecs-req, deploy_alb, deploy_network, deploy_sg, deploy_ecs_td]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: ./.github/actions/aws-config
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Output TD ID
        run: echo "${{ needs.deploy_ecs_td.outputs.ECSTaskDefinitionId }}"
      - name: Deploy CloudFormation Stack - ECS Service
        id: ecs-service
      #  env:
      #    TaskDef_Id: ${{ needs.deploy_ecs_td.outputs.ECSTaskDefinitionId }}
        uses: ./.github/actions/deploy-cf-stack
        with:
          stack-name: ${{ env.ENV_NAME }}-ecs-service
          template-file: ${{ env.ECS_SERVICE_TEMPLATE }}
          params-file: ${{ env.PARAMS_FILE }}
          extra-params: |
            ECSTaskDefinitionId=${{ needs.deploy_ecs_td.outputs.ECSTaskDefinitionId }}
            ECSClusterId=${{ needs.deploy_ecs-req.outputs.ECSClusterId }}
            AppLoadBalancerTargetGroupId=${{ needs.deploy_alb.outputs.AppLoadBalancerTargetGroupId }}
            PrivateSubnetId1=${{ needs.deploy_network.outputs.PrivateSubnetId1 }}
            PrivateSubnetId2=${{ needs.deploy_network.outputs.PrivateSubnetId2 }}
            SecurityGroupEcsId=${{ needs.deploy_sg.outputs.SecurityGroupEcsId }}
