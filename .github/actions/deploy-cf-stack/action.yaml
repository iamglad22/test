name: Deploy Cloud Formation Stack
description: Deploy a CloudFormation template and output values

inputs:
  stack-name:
    required: true
    description: AWS Cloudformation Stack name
  template-file:
    required: true
    description: Stack's template filename
  params-file: # pass as key1=value1 key2=value2...
    required: false
    description: Parameter filename
  extra-params:
    required: false
    description: 'Additional parameters to override (space-separated Key=Value)'
  output-keys:
    required: false
    description: 'Comma-separated list of OutputKeys to extract from the stack'
# Define outputs dynamically by parsing post-deployment as needed
#outputs: {}

outputs:
  outputs-json:
    description: JSON object of all extracted outputs
    value: ${{ steps.get_outputs.outputs.outputs-json }}



#outputs:
#  VPCId:
#    value: ${{ steps.get_outputs.outputs.VPCId }}
#    description: VPD ID
#  PublicSubnetId1:
#    value: ${{ steps.get_outputs.outputs.PublicSubnetId1 }}
#    description: Public Subnet ID
#  PublicSubnetId2:
#    value: ${{ steps.get_outputs.outputs.PublicSubnetId2 }}
#    description: Public Subnet ID
#  PrivateSubnetId1:
#    value: ${{ steps.get_outputs.outputs.PrivateSubnetId1 }}
#    description: Private Subnet ID
#  PrivateSubnetId2:
#    value: ${{ steps.get_outputs.outputs.PrivateSubnetId2 }}
#    description: Private Subnet ID
#  PrivateSubnetId3:
#    value: ${{ steps.get_outputs.outputs.PrivateSubnetId3 }}
#    description: Private Subnet ID
#  SecurityGroupEcsId:
#    value: ${{ steps.get_outputs.outputs.SecurityGroupEcsId }}
#    description: Security Group for ECS
#  SecurityGroupAlbId:
#    value: ${{ steps.get_outputs.outputs.SecurityGroupAlbId }}
#    description: Security Group for ALB
#  AppLoadBalancerDnsName:
#    value: ${{ steps.get_outputs.outputs.AppLoadBalancerDnsName }}
#    description: Application Load Balancer DNS Name
#  AppLoadBalancerTargetGroupId:
#    value: ${{ steps.get_outputs.outputs.AppLoadBalancerTargetGroupId }}
#    description: Application Load Balancer Target Group
#  ApiGatewayId:
#    value: ${{ steps.get_outputs.outputs.ApiGatewayId }}
#    description: API Gateway ID
#  ApiGatewayDomainName:
#    value: ${{ steps.get_outputs.outputs.ApiGatewayDomainName }}
#    description: API Gateway Domain Name
#  S3RegionalDomainName:
#    value: ${{ steps.get_outputs.outputs.S3RegionalDomainName }}
#    description: S3 Regional Domain Name
#  S3Arn:
#    value: ${{ steps.get_outputs.outputs.S3Arn }}
#    description: S3 ARN
#  S3BucketId:
#    value: ${{ steps.get_outputs.outputs.S3BucketId }}
#    description: S3 Bucket ID
#  CloudFrontURL:
#    value: ${{ steps.get_outputs.outputs.CloudFrontURL }}
#    description: CloudFront URL
#  CloudFrontId:
#    value: ${{ steps.get_outputs.outputs.CloudFrontId }}
#    description: CloudFront ID
#  image_uri:
#    value: ${{ steps.get_outputs.outputs.image_uri }}
#    description: Docker Image URI
#  LogGroupId:
#    value: ${{ steps.get_outputs.outputs.LogGroupId }}
#    description: ECS Log Group ID
#  EcsRoleArn:
#    value: ${{ steps.get_outputs.outputs.EcsRoleArn }}
#    description: ECS IAM Role ARN
#  ECSClusterId:
#    value: ${{ steps.get_outputs.outputs.ECSClusterId }}
#    description: ECS Cluster ID
#  TaskDefinitionId:
#    value: ${{ steps.get_outputs.outputs.TaskDefinitionId }}
#    description: ECS Task Definition ID

#  EcrRepositoryName:
#    value: ${{ steps.get_outputs.outputs.EcrRepositoryName }}
#    description: ECR Repository name

#  outputs-json:
#    description: JSON of outputs

runs:
  using: composite
  steps:
    - name: Deploy CFN stack
      shell: bash
      run: |
        echo "Deploying ${{ inputs.stack-name }}"
        PARAMS=$(jq -r '.[] | "\(.ParameterKey)=\(.ParameterValue)"' ${{ inputs.params-file }})
        if [[ -n "${{ inputs.extra-params }}" ]]; then
          PARAMS="$PARAMS ${{ inputs.extra-params }}"
        fi

        aws cloudformation deploy \
          --stack-name "${{ inputs.stack-name }}" \
          --template-file "${{ inputs.template-file }}" \
          --parameter-overrides $PARAMS \
          --capabilities CAPABILITY_NAMED_IAM
    #  shell: bash

    - name: Fetch Outputs JSON
      id: get_outputs
      shell: bash
      run: |
        OUT=$(aws cloudformation describe-stacks \
              --stack-name "${{ inputs.stack-name }}" \
              --query 'Stacks[0].Outputs' \
              --output json)

        
        echo "Extracting outputs: ${{ inputs.output-keys }}"

        # Define output keys
        IFS=',' read -ra KEYS <<< "${{ inputs.output-keys }}"

        # Loop through keys and extract values
        for KEY in "${KEYS[@]}"; do
          CLEAN_KEY=$(echo "$KEY" | xargs)
          VALUE=$(echo "$OUT" | jq -r ".[] | select(.OutputKey==\"$CLEAN_KEY\") | .OutputValue")

          if [[ -n "$VALUE" && "$VALUE" != "null" ]]; then
            echo "$CLEAN_KEY=$VALUE"
            echo "$CLEAN_KEY=$VALUE" >> "$GITHUB_OUTPUT"
          else
            echo "⚠️ Warning: OutputKey '$CLEAN_KEY' not found in stack outputs." >&2
          fi
        done
        echo "Printing GITHUB_OUTPUT."
        cat "$GITHUB_OUTPUT"




      #  echo "outputs-json=$OUT" >> $GITHUB_OUTPUT

      #  if [[ -n "${{ inputs.output-keys }}" ]]; then
      #    echo "Extracting outputs: ${{ inputs.output-keys }}"
      #    IFS=',' read -ra KEYS <<< "${{ inputs.output-keys }}"
      #    for KEY in "${KEYS[@]}"; do
                
      #      KEY=$(echo "$KEY" | xargs)      
      #      VALUE=$(echo "$OUT" | jq -r ".[] | select(.OutputKey==\"$KEY\") | .OutputValue")

      #      if [[ -n "$VALUE" && "$VALUE" != "null" ]]; then
      #        echo "$KEY=$VALUE" >> $GITHUB_OUTPUT
      #      else
      #        echo "⚠️ Warning: OutputKey '$KEY' not found in stack outputs." >&2
      #      fi
      #    done
      #  fi
      #      echo "$KEY=$VALUE" >> $GITHUB_OUTPUT
      #    done
      #  fi