AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation
Parameters:
  IFMVpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.0.2.0/24
  #  PublicSubnet3CIDR:
  #    Type: String
  #    Default: 10.0.3.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
  ClusterName:
    Type: String
    Default: mcfleetx-cluster
    Description: ECS Cluster Name

  ServiceName:
    Type: String
    Default: mcfleetx-service
    Description: ECS Service Name

  ECSTaskDefinitionName:
    Type: String
    Default: mcfleetx-df
    Description: ECS Task Definition Name

  ContainerImage:
    Type: String
    #  Default: amazon/amazon-ecs-sample
    #Default: public.ecr.aws/nginx/nginx:latest
    Default: 591915720983.dkr.ecr.us-east-1.amazonaws.com/mcfleetx-ecr-repo:latest
    Description: The Docker image URI for the ECS Task (e.g.,
      <account-id>.dkr.ecr.<region>.amazonaws.com/my-app:latest)

  ContainerPort:
    Type: Number
    Default: 80
    Description: The port the container will listen on

  ECRRepositoryName:
    Type: String
    Default: mcfleetx-ecr-repo
    Description: Name of the ECR repository

  ECSContainerName:
    Type: String
    Default: fleet-dashboard
    Description: Name of the ECS container

  S3Bucketname:
    Type: String
    Default: mcfleetx-bucket
    Description: Name of the S3 bucket

  ECSRoleName:
    Type: String
    Default: ecs-mcfleetx-role
    Description: Name of ECS Task Execution Role Policy

  StageName:
    Type: String
    Default: dev
    Description: API Gateway Deployment Stage Name
Resources:
  # ====================================
  # Networking: VPC, subnets, IGW, NAT
  #
  IFMVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref IFMVpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-igw
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref IFMVpc
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IFMVpc
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-pub-subnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IFMVpc
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-pub-subnet2
  #  PublicSubnet3:
  #    Type: AWS::EC2::Subnet
  #    Properties:
  #      VpcId: !Ref IFMVpc
  #      CidrBlock: !Ref PublicSubnet3CIDR
  #      AvailabilityZone: !Select
  #        - 2
  #        - !GetAZs ''
  #      MapPublicIpOnLaunch: true
  #      Tags:
  #        - Key: Project
  #          Value: IFM_Moeve
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IFMVpc
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-priv-subnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref IFMVpc
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-priv-subnet1

  EIPForNat:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPForNat.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-natgw
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IFMVpc
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-rt-pub
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  #  PublicSubnet3RouteTableAssociation:
  #    Type: AWS::EC2::SubnetRouteTableAssociation
  #    Properties:
  #      SubnetId: !Ref PublicSubnet3
  #      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IFMVpc
      Tags:
        - Key: Project
          Value: IFM_Moeve
        - Key: Name
          Value: mcfleetx-rt-priv
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  # =====================
  # Security Groups
  # =====================
  SecurityGroupECS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IFMVpc
      GroupDescription: Allow ALB to reach ECS tasks
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref SecurityGroupALB
      Tags:
        - Key: Name
          Value: mcfleetx-ecs-sg
  SecurityGroupALB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IFMVpc
      GroupDescription: Allow HTTP inbound to ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: mcfleetx-alb-sg
  # =====================
  # ECR, ECS Cluster & Definitions, IAM Role
  # =====================
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Project
          Value: IFM_Moeve
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref ECSRoleName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  MyECSCluster:
    Type: AWS::ECS::Cluster
    #    DependsOn: 
    #      - ECSTaskDefinition
    Properties:
      ClusterName: !Ref ClusterName
    #      CapacityProviders:
    #        - FARGATE
    #        - FARGATE_SPOT
    #      ClusterSettings:
    #        - Name: containerInsights
    #          Value: enabled
    #      Tags:
    #        - Key: Project
    #          Value: IFM_Moeve
    # Task Execution Role

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ECSContainerName
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          #HealthCheck:
          #  Command:
          #    - CMD-SHELL
          #    - curl -f http://localhost/ || exit 1
          #  Interval: 30
          #  Timeout: 5
          #  Retries: 3
          #  StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: mcfleetx
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSExecutionRole.Arn
      #  Family: !Ref ServiceName
      Family: !Ref ECSTaskDefinitionName
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      Tags:
        - Key: Project
          Value: IFM_Moeve
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/mcfleetx-log
      RetentionInDays: 7

  # ========================================
  # Load Balancer & Target Group
  # ======================================== 
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: mcfleetx-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroupALB

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: mcfleetx-target-group
      VpcId: !Ref IFMVpc
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG

  # ========================================
  # ECS Service
  # ========================================
  # ECS Service - Attach ALB Target Group
  MyEcsService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref MyECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTG
          ContainerName: !Ref ECSContainerName
          ContainerPort: !Ref ContainerPort
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref SecurityGroupECS
          AssignPublicIp: DISABLED

  # ========================================
  # API Gateway HTTP
  # ========================================

  MyApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mcfleetx-Api
      Description: API Gateway for ECS Fargate Service
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - OPTIONS
          - PUT
          - DELETE
          - PATCH
          - HEAD

  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref MyApiGateway
      IntegrationType: HTTP_PROXY
      IntegrationMethod: ANY
      IntegrationUri: !Sub
        - http://${albDnsName}
        - albDnsName: !GetAtt ALB.DNSName
      PayloadFormatVersion: '1.0'

  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref MyApiGateway
      RouteKey: ANY /{proxy+}
      Target: !Sub integrations/${ApiGatewayIntegration}

  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref MyApiGateway
      AutoDeploy: true
      StageName: !Ref StageName
  # ========================================
  # S3 + CloudFront
  # ========================================
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3Bucketname
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced # Ensures bucket owner owns all objects
      #S3Configuration:
      #  IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServiceAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub ${S3Bucket.Arn}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
  MyCloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: MyOAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Description: Access control for CloudFront to S3

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref MyCloudFrontOAC
          - Id: ApiGatewayOrigin
            DomainName: !Sub ${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com
            OriginPath: /dev
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: '403'
            ResponsePagePath: /index.html
            ResponseCode: '200'
            ErrorCachingMinTTL: '0'
          - ErrorCode: '404'
            ResponsePagePath: /index.html
            ResponseCode: '200'
            ErrorCachingMinTTL: '0'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          Compress: true
          #  TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          #CachePolicyId: !Ref ApiCachePolicy 
          #OriginRequestPolicyId: !Ref ApiOriginRequestPolicy
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - POST
            - OPTIONS
            - PUT
            - PATCH
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
              - Origin
          DefaultTTL: 86400 # 1 day
          MinTTL: 3600 # 1 hour
          MaxTTL: 31536000 # 1 year
        CacheBehaviors:
          #  - PathPattern: /static/*
          - PathPattern: api/*
            #TargetOriginId: S3Origin
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: allow-all
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
            ForwardedValues:
              QueryString: true
              Headers:
                - Access-Control-Request-Headers
                - Access-Control-Request-Method
                - Origin
                - Authorization
            Compress: true
            #CachePolicyId: !Ref MyCachePolicy   # CachingOptimized for S3
            #OriginRequestPolicyId: !Ref MyOriginRequestPolicy
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  VPCId:
    Value: !Ref IFMVpc
    Description: ID of the VPC
  PublicSubnetId1:
    Value: !Ref PublicSubnet1
    Description: Public subnet ID
  PublicSubnetId2:
    Value: !Ref PublicSubnet2
    Description: Public subnet ID
  #  PublicSubnetId3:
  #    Value: !Ref PublicSubnet3
  #    Description: Public subnet ID
  PrivateSubnetId1:
    Value: !Ref PrivateSubnet1
    Description: Private subnet ID
  PrivateSubnetId2:
    Value: !Ref PrivateSubnet2
    Description: Private subnet ID
  RepositoryUri:
    Description: URI of the ECR repository
    Value: !GetAtt EcrRepository.RepositoryUri
    #ApiGatewayUrl:
    #  Value: !Sub https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com
    #  Description: URL for the API Gateway endpoint
    #EcsServiceUrl:
    # Value: !Sub http://${MyALB.DNSName}
    #Description: URL for the ECS service via ALB
  ALBDNS:
    Description: DNS of the ALB
    Value: !GetAtt ALB.DNSName
  APIURL:
    Description: API Gateway endpoint
    Value: !Sub https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com
  #InternalALBDNS:
  #  Description: Internal ALB DNS
  #  Value: !GetAtt MyALB.DNSName
  CloudFrontURL:
    Value: !GetAtt CloudFrontDistribution.DomainName
    Description: CloudFront URL for S3 content
  BucketName:
    Description: S3 Bucket name
    Value: !Ref S3Bucket
  ApiGatewayInvokeUrl:
    Description: Invoke URL for API Gateway HTTP API
    Value: !Sub https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/